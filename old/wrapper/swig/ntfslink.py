# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
Simple python module wrapping some of the Win32 API to allow support for
junctions, symbolic links, and hardlinks. For information on junctions, see the
MSDN entry on `Junction Points<http://msdn.microsoft.com/en-us/library/bb968829%28VS.85%29.aspx>`_, `Hard Links<http://msdn.microsoft.com/en-us/library/aa365006%28v=VS.85%29.aspx>`_,
and `Symbolic Links<http://msdn.microsoft.com/en-us/library/aa365680%28v=VS.85%29.aspx>`_

TODO:
- Find a way to implement the following functions:

    ntfslink.readlink(path)
      Return a string representing the path to which the symbolic link points.

    ntfslink.islink(path)
      Return True if path refers to a directory/file entry that is a symbolic
      link.

- Look into wrapping `Volume Mount Points<http://msdn.microsoft.com/en-us/library/aa365733%28v=VS.85%29.aspx>`_.

- Look into wrapping `Wow64FsRedirection<http://msdn.microsoft.com/en-us/library/aa365744%28v=VS.85%29.aspx>`_.

- Write a python module to direct calls to the correct modules depending on
  current operating system.


"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ntfslink', [dirname(__file__)])
        except ImportError:
            import _ntfslink
            return _ntfslink
        if fp is not None:
            try:
                _mod = imp.load_module('_ntfslink', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ntfslink = swig_import_helper()
    del swig_import_helper
else:
    import _ntfslink
del version_info
from _ntfslink import *
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


__all__ = ['isjunction', 'link', 'symlink', 'junction', 'readjunction', 'rmdir', 'unlink']



